// Code generated by mockery v2.20.2. DO NOT EDIT.

package dal

import mock "github.com/stretchr/testify/mock"

// MockDal is an autogenerated mock type for the Dal type
type MockDal struct {
	mock.Mock
}

type MockDal_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDal) EXPECT() *MockDal_Expecter {
	return &MockDal_Expecter{mock: &_m.Mock}
}

// DeleteFile provides a mock function with given fields: fileName
func (_m *MockDal) DeleteFile(fileName string) error {
	ret := _m.Called(fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDal_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockDal_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - fileName string
func (_e *MockDal_Expecter) DeleteFile(fileName interface{}) *MockDal_DeleteFile_Call {
	return &MockDal_DeleteFile_Call{Call: _e.mock.On("DeleteFile", fileName)}
}

func (_c *MockDal_DeleteFile_Call) Run(run func(fileName string)) *MockDal_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDal_DeleteFile_Call) Return(_a0 error) *MockDal_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDal_DeleteFile_Call) RunAndReturn(run func(string) error) *MockDal_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFilesNames provides a mock function with given fields:
func (_m *MockDal) GetAllFilesNames() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDal_GetAllFilesNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFilesNames'
type MockDal_GetAllFilesNames_Call struct {
	*mock.Call
}

// GetAllFilesNames is a helper method to define mock.On call
func (_e *MockDal_Expecter) GetAllFilesNames() *MockDal_GetAllFilesNames_Call {
	return &MockDal_GetAllFilesNames_Call{Call: _e.mock.On("GetAllFilesNames")}
}

func (_c *MockDal_GetAllFilesNames_Call) Run(run func()) *MockDal_GetAllFilesNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDal_GetAllFilesNames_Call) Return(_a0 []string, _a1 error) *MockDal_GetAllFilesNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDal_GetAllFilesNames_Call) RunAndReturn(run func() ([]string, error)) *MockDal_GetAllFilesNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function with given fields: fileName, extension
func (_m *MockDal) GetFile(fileName string, extension string) ([]byte, error) {
	ret := _m.Called(fileName, extension)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(fileName, extension)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(fileName, extension)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(fileName, extension)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDal_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockDal_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - fileName string
//   - extension string
func (_e *MockDal_Expecter) GetFile(fileName interface{}, extension interface{}) *MockDal_GetFile_Call {
	return &MockDal_GetFile_Call{Call: _e.mock.On("GetFile", fileName, extension)}
}

func (_c *MockDal_GetFile_Call) Run(run func(fileName string, extension string)) *MockDal_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDal_GetFile_Call) Return(_a0 []byte, _a1 error) *MockDal_GetFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDal_GetFile_Call) RunAndReturn(run func(string, string) ([]byte, error)) *MockDal_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// StoreFile provides a mock function with given fields: buffer, fileName, extension
func (_m *MockDal) StoreFile(buffer []byte, fileName string, extension string) error {
	ret := _m.Called(buffer, fileName, extension)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string, string) error); ok {
		r0 = rf(buffer, fileName, extension)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDal_StoreFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreFile'
type MockDal_StoreFile_Call struct {
	*mock.Call
}

// StoreFile is a helper method to define mock.On call
//   - buffer []byte
//   - fileName string
//   - extension string
func (_e *MockDal_Expecter) StoreFile(buffer interface{}, fileName interface{}, extension interface{}) *MockDal_StoreFile_Call {
	return &MockDal_StoreFile_Call{Call: _e.mock.On("StoreFile", buffer, fileName, extension)}
}

func (_c *MockDal_StoreFile_Call) Run(run func(buffer []byte, fileName string, extension string)) *MockDal_StoreFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDal_StoreFile_Call) Return(_a0 error) *MockDal_StoreFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDal_StoreFile_Call) RunAndReturn(run func([]byte, string, string) error) *MockDal_StoreFile_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDal interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDal creates a new instance of MockDal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDal(t mockConstructorTestingTNewMockDal) *MockDal {
	mock := &MockDal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
